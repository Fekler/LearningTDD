name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar o .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restaurar dependências
      run: dotnet restore ./LearningTDD/LearningTDD.sln

    - name: Build
      run: dotnet build --no-restore --configuration Release ./LearningTDD/LearningTDD.sln

    - name: Testar
      run: dotnet test --no-build --configuration Release --verbosity normal ./LearningTDD/LearningTDD.sln

    - name: Configurar variáveis de ambiente
      run: |
        echo "ENVIRONMENT=Development" >> $GITHUB_ENV
        echo "ConnectionStrings__DefaultConnection=${{ secrets.CONNECTION_STRING }}" >> $GITHUB_ENV
        
    - name: Arquivar artefatos de build
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          ./LearningTDD/bin/Release
          ./LearningTDD/Dockerfile
          

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Baixar artefatos de build
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Deploy para a VM via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u Fekler --password-stdin
    
          # Criar diretório para os artefatos
          mkdir -p ~/build-artifacts
    
          # Verificar o conteúdo do diretório temporário onde os artefatos são baixados
          ls -la /home/runner/work/_temp/build-artifacts/
    
          # Copiar os artefatos para o diretório de trabalho
          cp -r /home/runner/work/_temp/build-artifacts/* ~/build-artifacts/
    
          # Verificar se os artefatos foram copiados corretamente
          ls -la ~/build-artifacts/
    
          # Construir a imagem Docker
          sudo docker build -t ghcr.io/fekler/learningtdd/learningtdd:latest -f ~/build-artifacts/Dockerfile ~/build-artifacts
    
          # Parar e remover o container existente, se houver
          sudo docker stop learningtdd || true
          sudo docker rm learningtdd || true
    
          # Executar o container Docker com a variável de ambiente
          sudo docker run -d -p 8080:8080 --name learningtdd --network tdd_network \
            -e ConnectionStrings__DefaultConnection=${{ secrets.CONNECTION_STRING }} \
            ghcr.io/fekler/learningtdd/learningtdd:latest
